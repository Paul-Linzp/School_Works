package test;  
  
import java.io.BufferedReader;  
import java.io.FileNotFoundException;  
import java.io.FileReader;  
import java.io.IOException;  
  
/**  
 * 1 基本字  
 * 2 标识符   
 * 3 常数    
 * 4 算符  
 * 5 界符  
 * 6 符号串
 */  
  
public class Compiler {  
    //===============================================
    public int ch;  
    public int code;//保留字状态码  
    public int letter;//符号串状态码
    //================================================
    public int sign_test_cont = 0;//检验符号串标志位次数计数器
    public int flag;//检验符号串标志位标志
    public int flag2 = 99;//符号串匹配辅助标志位
    public int Line_Count = 0;//程序行计算器
    public int signal = 0;//符号串匹配辅助标志位
    //================================================
      
    public StringBuffer strToken = new StringBuffer();//存放构成单词符号的字符串  
    
    public StringBuffer signToken = new StringBuffer();//存放构成符号串的字符串
      
    public String [] retainWord = new String[]{"int","if","else","return","main","void","while","break"};//保留字  
      
    public String [] letterSign = new String[]{"++","--",">>","<<","+=","-=","*=","/=","&&","||","/*","*/"};//符号串
    
    
    //==========================字符类型判断==========================
    //判断是否是字母  
    public boolean IsLetter(){  
        if((ch>=65 && ch <= 90) || (ch >= 97 && ch <=122)){  
            return true;  
        }  
        return false;  
    }  
      
    //判断是否是数字  
    public boolean IsDigit(){  
        if(ch>=48 && ch <= 57){  
            return true;  
        }  
        return false;  
    }  
      
    //判断是否是空格  
    public boolean IsBC(int ch){  
        if(ch == 32){  
            return true;  
        }  
        return false;  
    }  
    //==========================字符类型判断==========================
      
    //============================连接字符============================  
    public void Concat(char ch){  
        strToken.append(ch);  
    }  
    
    public void Sign_Concat(char ch) {
    	signToken.append(ch);
    }
    //============================连接符号============================
    
    //===================判断单词符号，判断字符串函数===================
    /*
     * 函数名：LetterSign
     * 函数功能：判断是否是单词符号
     * 函数参数：无
     */
    public int LetterSign(){
    	for(int i = 0;i < letterSign.length;i++){
    		if(signToken.toString().equals(letterSign[i])){
    			flag = 3;
    			return 1;
    		}
    	}
    	sign_test_cont++;
    	if(sign_test_cont == 2 && flag != 3) {
    		flag = 1;
    	}
    	return 0;
    }
      
    /*
     * 函数名：Reserve
     * 函数功能：判断是否是保留字
     * 函数参数：无 
     */
    public int Reserve(){  
    	if(Error_Report() == 1) {
    		return 4;
    	}
        for(int i = 0;i < retainWord.length;i++){  
            if(strToken.toString().equals(retainWord[i])){  
                return 1;  
            }  
        }  
        if(strToken.length() != 0){  
            if(strToken.charAt(0)>='0' && strToken.charAt(0)<='9'){  
                return 3;  
            }  
        }  
          
        return 2;  
    }  
    //===================判断单词符号，判断字符串函数===================
    
    
    //===================非符号资源判断函数===================
    /*
     * 函数名Retra_Sign: 区分符号串函数
     * 函数名Retract: 区分字符串函数
     */
    public void Retract_Sign() {
    	letter = LetterSign();
        if(letter == 1){
        	System.out.println("('"+6+"','"+signToken+"')");
            signToken.delete(0, signToken.length());
        }
    }
    
    public void Retract(){ 
        code = Reserve();  
        if(code == 1){  
            System.out.println("('"+1+"','"+strToken+"')");  
        }else if(code == 2){  
            System.out.println("('"+2+"','"+strToken+"')");  
        }  
        else if(code == 3){  
            System.out.println("('"+3+"','"+strToken+"')");  
        }  
        else if(code == 4) {
        	
        }
        strToken.delete(0, strToken.length());  
    }  
    
    //===================非符号字符判断函数===================
    
    //===================错误判断函数集=====================
    public int Error_Report() {
    	int i = 0;
    	if(strToken.length() > 1 && strToken.toString().charAt(0) >= 49 && strToken.toString().charAt(0) <=57 ) {
    		for(i = 0; i < strToken.length(); i++) {
    			if(strToken.toString().charAt(i) <= 49 || strToken.toString().charAt(i) >= 57) {
    	    		System.out.println("Syntax Error: in line "+Line_Count);
    	    		strToken.delete(0, strToken.length());
    	    		flag2 = 99;
    	    		return 1;
    			}
    		}
    	}
    	return 2;
    }
    //===================错误判断函数集=====================
      
    /**  
     * 读取文件  
     */  
    public void scanner(){  
        BufferedReader br;  
        try {  
            br = new BufferedReader(new FileReader("D:\\lzp文件\\大三下课程文档\\编译原理\\词法分析器\\tests.txt"));  
            while((ch = br.read()) != -1){  
            	if(ch == 10) {
            		Line_Count++;
            	}
                //System.out.println("======="+(char)ch);  
                if(IsBC(ch) == false){  
                    if(IsLetter()){  
                        if(IsLetter() == true || IsDigit() == true){  
                            Concat((char) ch);  
                        }  
                    }else if(IsDigit() == true){  
                        Concat((char)ch);  
                    }else if(IsDigit()){  
                        Concat((char) ch);  
                    }else if(ch == 61){  
                        if((strToken.length() != 0 )&& (strToken.charAt(0) == '=')){  
                            strToken.append((char)ch);  
                            System.out.println("('"+4+"','"+strToken+"')");  
                            strToken.delete(0, strToken.length());  
                        }else{  
                            strToken.append((char)ch);  
                        }  
                    }else if(ch == 43){  
                        Retract();  
                        Sign_Concat((char)ch);
                        Retract_Sign();
                        signal = 1;
                        flag2 = 0;
                        if(flag == 1) {
                        	System.out.println("('"+4+"','"+(char) ch+"')");
                        	flag = 0;
                        }
                    }else if(ch == 45){  
                        Retract();  
                        Sign_Concat((char)ch);
                        Retract_Sign();
                        signal = 1;
                        flag2 = 0;
                        if(flag == 1) {
                        	System.out.println("('"+4+"','"+(char) ch+"')");
                        	flag = 0;
                        }
                    }else if(ch == 42){  
                        Retract();  
                        Sign_Concat((char)ch);
                        Retract_Sign();
                        signal = 1;
                        flag2 = 0;
                        if(flag == 1) {
                        	System.out.println("('"+4+"','"+(char) ch+"')");
                        	flag = 0;
                        }
                    }else if(ch == 47){  
                        Retract();  
                        Sign_Concat((char)ch);
                        Retract_Sign();
                        signal = 1;
                        flag2 = 0;
                        if(flag == 1) {
                        	System.out.println("('"+4+"','"+(char) ch+"')");
                        	flag = 0;
                        } 
                    }else if((char) ch == ';'){  
                        Retract();  
                        System.out.println("('"+5+"','"+(char) ch+"')");  
                    }else if((char) ch == '('){  
                        Retract();  
                        System.out.println("('"+5+"','"+(char) ch+"')");  
                    }else if((char) ch == ')'){  
                        Retract();  
                        System.out.println("('"+5+"','"+(char) ch+"')");  
                    }else if((char) ch == '{'){  
                        Retract();  
                        System.out.println("('"+5+"','"+(char) ch+"')");  
                    }else if((char) ch == '}'){  
                        Retract();  
                        System.out.println("('"+5+"','"+(char) ch+"')");  
                    }else if((char) ch == ','){  
                        Retract();  
                        System.out.println("('"+5+"','"+(char) ch+"')");  
                    }else if((char) ch == '!'){
                    	Retract();
                    	System.out.println("('"+5+"','"+(char) ch+"')");
                    }else if((char) ch == '"'){
                    	Retract();
                    	System.out.println("('"+5+"','"+(char) ch+"')");
                    }else if((char) ch == '<'){
                        Retract();  
                        Sign_Concat((char)ch);
                        Retract_Sign();
                        signal = 1;
                        flag2 = 0;
                        if(flag == 1) {
                        	System.out.println("('"+4+"','"+(char) ch+"')");
                        	flag = 0;
                        }
                    }else if((char) ch == '>'){
                        Retract();  
                        Sign_Concat((char)ch);
                        Retract_Sign();
                        signal = 1;
                        flag2 = 0;
                        if(flag == 1) {
                        	System.out.println("('"+4+"','"+(char) ch+"')");
                        	flag = 0;
                        }
                    }else if((char) ch == '*'){
                        Retract();  
                        Sign_Concat((char)ch);
                        Retract_Sign();
                        signal = 1;
                        flag2 = 0;
                        if(flag == 1) {
                        	System.out.println("('"+4+"','"+(char) ch+"')");
                        	flag = 0;
                        }
                    }else if((char) ch == '|'){
                        Retract();  
                        Sign_Concat((char)ch);
                        Retract_Sign();
                        signal = 1;
                        flag2 = 0;
                        if(flag == 1) {
                        	System.out.println("('"+4+"','"+(char) ch+"')");
                        	flag = 0;
                        }
                    }else if((char) ch == '/'){
                        Retract();  
                        Sign_Concat((char)ch);
                        Retract_Sign();
                        signal = 1;
                        flag2 = 0;
                        if(flag == 1) {
                        	System.out.println("('"+4+"','"+(char) ch+"')");
                        	flag = 0;
                        }
                    }else if((char) ch == '&'){
                        Retract();  
                        Sign_Concat((char)ch);
                        Retract_Sign();
                        signal = 1;
                        flag2 = 0;
                        if(flag == 1) {
                        	System.out.println("('"+4+"','"+(char) ch+"')");
                        	flag = 0;
                        }
                    }
                      
                }else{  
                    Retract();  
                }  
                flag2++;
                if(flag2 == 2 && signal == 1 && flag != 1 && signToken.length() != 0) {
                	int temp2 = Error_Report();
                	if(temp2 == 0) {
                		continue;
                	}
                	System.out.println("('"+4+"','"+signToken+"')");
                	signToken.delete(0, signToken.length());
                	flag2 = 99;
                }else if(flag2 == 2) {
                	flag2 = 99;
                }
            }  
        } catch (FileNotFoundException e1) {  
            // TODO Auto-generated catch block  
            e1.printStackTrace();  
        } catch (IOException e) {  
            // TODO Auto-generated catch block  
            e.printStackTrace();  
        }  
    }  
      
    public static void main(String[] args) {  
        Compiler Compiler = new Compiler();  
        Compiler.scanner();  
    }  
  
}  